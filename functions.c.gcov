        -:    0:Source:functions.c
        -:    0:Graph:functions.gcno
        -:    0:Data:functions.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <ctype.h>
        -:    4:#include "functions.h"
        -:    5:
function ReadNumber called 24 returned 100% blocks executed 90%
       24:    6:int ReadNumber() {
        -:    7:        int number;
       32:    8:        while(scanf("%d",&number)!=1 || number <= 0){
       24:    8-block  0
unconditional  0 taken 24
       24:    8-block  1
unconditional  1 taken 24
       32:    8-block  2
branch  2 taken 0
branch  3 taken 32
       32:    8-block  3
unconditional  4 taken 32
       32:    8-block  4
branch  5 taken 8
branch  6 taken 24
        8:    8-block  5
unconditional  7 taken 8
        8:    9:                printf("Incorrect input! Try again\n");
        8:   10:                while (getchar() != '\n') {
        8:   10-block  0
unconditional  0 taken 8
        8:   10-block  1
branch  1 taken 0
branch  2 taken 8
    $$$$$:   10-block  2
unconditional  3 never executed
        -:   11:                }
        -:   12:        }
       24:   13:        return number;
       24:   13-block  0
unconditional  0 taken 24
        -:   14:}
        -:   15:
function ReadBarCode called 55 returned 100% blocks executed 100%
       55:   16:int ReadBarCode(){
        -:   17:        int number;
       55:   18:        printf("Write 6-digit barcode: ");
       55:   18-block  0
unconditional  0 taken 55
       64:   19:        while(scanf("%d",&number)!=1 || number <= 99999 || number >= 1000000){
       55:   19-block  0
unconditional  0 taken 55
       64:   19-block  1
branch  1 taken 1
branch  2 taken 63
       63:   19-block  2
branch  3 taken 8
branch  4 taken 55
       55:   19-block  3
unconditional  5 taken 55
       64:   19-block  4
branch  6 taken 9
branch  7 taken 55
        9:   19-block  5
unconditional  8 taken 9
        9:   20:                printf("Incorrect input! Try again\n");
       16:   21:                while (getchar() != '\n') {
        9:   21-block  0
unconditional  0 taken 9
       16:   21-block  1
branch  1 taken 7
branch  2 taken 9
        7:   21-block  2
unconditional  3 taken 7
        -:   22:                }
        -:   23:        }
       55:   24:        return number;
       55:   24-block  0
unconditional  0 taken 55
        -:   25:}
        -:   26:
function ReadNumProduct called 16 returned 100% blocks executed 92%
       16:   27:int ReadNumProduct() {
        -:   28:        int number;
       16:   29:        printf("\nWrite num of product: ");
       16:   29-block  0
unconditional  0 taken 16
       24:   30:        while(scanf("%d",&number)!=1 || number < 0 || number >= 1000000){
       16:   30-block  0
unconditional  0 taken 16
       24:   30-block  1
branch  1 taken 0
branch  2 taken 24
       24:   30-block  2
branch  3 taken 8
branch  4 taken 16
       16:   30-block  3
unconditional  5 taken 16
       24:   30-block  4
branch  6 taken 8
branch  7 taken 16
        8:   30-block  5
unconditional  8 taken 8
        8:   31:                printf("Incorrect input! Try again\n");
        8:   32:                while (getchar() != '\n') {
        8:   32-block  0
unconditional  0 taken 8
        8:   32-block  1
branch  1 taken 0
branch  2 taken 8
    $$$$$:   32-block  2
unconditional  3 never executed
        -:   33:                }
        -:   34:        }
       16:   35:        if (number == 0){
       16:   35-block  0
branch  0 taken 8
branch  1 taken 8
        8:   36:                return -1;
        8:   36-block  0
unconditional  0 taken 8
        -:   37:        }
        8:   38:        return number;
        8:   38-block  0
unconditional  0 taken 8
       16:   39:}
       16:   39-block  0
unconditional  0 taken 16
        -:   40:
function ReadNumOfCard called 8 returned 100% blocks executed 90%
        8:   41:int ReadNumOfCard() {
        -:   42:        int number;
        8:   43:        printf("Write 4-digit card number: ");
        8:   43-block  0
unconditional  0 taken 8
       16:   44:        while(scanf("%d",&number)!=1 || number <= 999 || number >= 10000){
        8:   44-block  0
unconditional  0 taken 8
       16:   44-block  1
branch  1 taken 0
branch  2 taken 16
       16:   44-block  2
branch  3 taken 8
branch  4 taken 8
        8:   44-block  3
unconditional  5 taken 8
       16:   44-block  4
branch  6 taken 8
branch  7 taken 8
        8:   44-block  5
unconditional  8 taken 8
        8:   45:                printf("Incorrect input! Try again\n");
        8:   46:                while (getchar() != '\n') {
        8:   46-block  0
unconditional  0 taken 8
        8:   46-block  1
branch  1 taken 0
branch  2 taken 8
    $$$$$:   46-block  2
unconditional  3 never executed
        -:   47:                }
        -:   48:        }
        8:   49:        return number;
        8:   49-block  0
unconditional  0 taken 8
        -:   50:}
        -:   51:
function Purchase called 0 returned 0% blocks executed 0%
    #####:   52:int Purchase(BCode headbarcode) {
    $$$$$:   52-block  0
unconditional  0 never executed
    #####:   53:        int sum = 0;
    #####:   54:        int choiceproduct = 1;
    #####:   55:        FILE* outputHistory = fopen("history.txt", "a");
    #####:   56:        if (outputHistory == NULL) {
    $$$$$:   56-block  0
branch  0 never executed
branch  1 never executed
    #####:   57:            printf("File is not found");
    #####:   58:            exit(0);
    $$$$$:   58-block  0
        -:   59:        }
    #####:   60:        printf("Do you want to add new item? Y-1/N-0\n");
        -:   61:        int choice;
    #####:   62:        while (scanf("%d", &choice) != 1 || (choice != 1 && choice != 0))
    $$$$$:   62-block  0
unconditional  0 never executed
    $$$$$:   62-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   62-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:   62-block  3
unconditional  5 never executed
    $$$$$:   62-block  4
unconditional  6 never executed
    $$$$$:   62-block  5
branch  7 never executed
branch  8 never executed
    $$$$$:   62-block  6
unconditional  9 never executed
        -:   63:        {
    #####:   64:                printf("Incorrect input! Try again\n");
    #####:   65:                while (getchar() != '\n') {
    $$$$$:   65-block  0
unconditional  0 never executed
    $$$$$:   65-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   65-block  2
unconditional  3 never executed
        -:   66:                }
        -:   67:        }
    #####:   68:        if (choice == 1) {
    $$$$$:   68-block  0
branch  0 never executed
branch  1 never executed
    #####:   69:            choiceproduct = 1;
    #####:   70:        }
    $$$$$:   70-block  0
unconditional  0 never executed
        -:   71:        else {
    #####:   72:            choiceproduct = 0;
    $$$$$:   72-block  0
unconditional  0 never executed
        -:   73:        }
    #####:   74:        while (choiceproduct) {
    $$$$$:   74-block  0
unconditional  0 never executed
    $$$$$:   74-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   74-block  2
unconditional  3 never executed
        -:   75:                int thisbarcode;
    #####:   76:                thisbarcode = ReadBarCode();
    #####:   77:                BCode current = headbarcode;
    #####:   78:                while (current != NULL) {
    $$$$$:   78-block  0
unconditional  0 never executed
    $$$$$:   78-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   78-block  2
unconditional  3 never executed
    #####:   79:                        if (current->key == thisbarcode) break;
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   79-block  1
unconditional  2 never executed
    #####:   80:                        current = current->next;
        -:   81:                }
    #####:   82:                if (current == NULL) {
    $$$$$:   82-block  0
branch  0 never executed
branch  1 never executed
    #####:   83:                        printf("\nThis item doesn't exist");
    #####:   84:                }
    $$$$$:   84-block  0
unconditional  0 never executed
        -:   85:                else {
        -:   86:                        int numproduct;
    #####:   87:                        numproduct = ReadNumProduct();
    #####:   88:                        if (numproduct == -1){
    $$$$$:   88-block  0
branch  0 never executed
branch  1 never executed
    #####:   89:                            continue;
    $$$$$:   89-block  0
unconditional  0 never executed
        -:   90:                        }
        -:   91:                        else {
    #####:   92:                                sum += (current->price) * numproduct;
    #####:   93:                                fprintf(outputHistory, "%s x %d = %d\n", current->name, numproduct, (current->price) * numproduct);
    $$$$$:   93-block  0
unconditional  0 never executed
        -:   94:                        }
        -:   95:                }
    #####:   96:                printf("\n\nDo you want to add new item? Y-1/N-0\n");
    #####:   97:                while (scanf("%d", &choice) != 1 || (choice != 1 && choice != 0))
    $$$$$:   97-block  0
unconditional  0 never executed
    $$$$$:   97-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   97-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:   97-block  3
unconditional  5 never executed
    $$$$$:   97-block  4
unconditional  6 never executed
    $$$$$:   97-block  5
branch  7 never executed
branch  8 never executed
    $$$$$:   97-block  6
unconditional  9 never executed
        -:   98:                {
    #####:   99:                        printf("Incorrect input! Try again\n");
    #####:  100:                        while (getchar() != '\n') {
    $$$$$:  100-block  0
unconditional  0 never executed
    $$$$$:  100-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  100-block  2
unconditional  3 never executed
        -:  101:                        }
        -:  102:                }
    #####:  103:                if (choice == 1) {
    $$$$$:  103-block  0
branch  0 never executed
branch  1 never executed
    #####:  104:                        choiceproduct = 1;
    #####:  105:                }
    $$$$$:  105-block  0
unconditional  0 never executed
        -:  106:                else {
    #####:  107:                        choiceproduct = 0;
    $$$$$:  107-block  0
unconditional  0 never executed
        -:  108:                }
        -:  109:        }
    #####:  110:        fclose(outputHistory);
    #####:  111:        return sum;
    $$$$$:  111-block  0
unconditional  0 never executed
        -:  112:}
        -:  113:
function UseCreditCard called 0 returned 0% blocks executed 0%
    #####:  114:int UseCreditCard(int sum, CCard headcreditcard) {
    $$$$$:  114-block  0
unconditional  0 never executed
    #####:  115:        if (sum != 0) {
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:                FILE* outputHistory = fopen("history.txt", "a");
    #####:  117:                if (outputHistory == NULL) {
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:                        printf("File is not found");
    #####:  119:                        exit(0);
    $$$$$:  119-block  0
        -:  120:                }
    #####:  121:                printf("Have you some credit card? Y-1/N-0\n");
        -:  122:                int choice;
    #####:  123:                while (scanf("%d", &choice) != 1 || (choice != 1 && choice != 0))
    $$$$$:  123-block  0
unconditional  0 never executed
    $$$$$:  123-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  123-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:  123-block  3
unconditional  5 never executed
    $$$$$:  123-block  4
unconditional  6 never executed
    $$$$$:  123-block  5
branch  7 never executed
branch  8 never executed
    $$$$$:  123-block  6
unconditional  9 never executed
        -:  124:                {
    #####:  125:                        printf("Incorrect input! Try again\n");
    #####:  126:                        while (getchar() != '\n') {
    $$$$$:  126-block  0
unconditional  0 never executed
    $$$$$:  126-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  126-block  2
unconditional  3 never executed
        -:  127:                        }
        -:  128:                }
    #####:  129:                if (choice == 1) {
    $$$$$:  129-block  0
branch  0 never executed
branch  1 never executed
    #####:  130:                        int j = 0;
    #####:  131:                        int numofcard = ReadNumOfCard();
    #####:  132:                        printf("\n");
    #####:  133:                        CCard current = headcreditcard;
    #####:  134:                        while (current != NULL) {
    $$$$$:  134-block  0
unconditional  0 never executed
    $$$$$:  134-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  134-block  2
unconditional  3 never executed
    #####:  135:                                if (numofcard == current->numofcard) break;
    $$$$$:  135-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  135-block  1
unconditional  2 never executed
    #####:  136:                                current = current->next;
        -:  137:                        }
    #####:  138:                        if (current == NULL) {
    $$$$$:  138-block  0
branch  0 never executed
branch  1 never executed
    #####:  139:                                printf("\nThe card with this number doesn't exist\n");
    #####:  140:                        }
    $$$$$:  140-block  0
unconditional  0 never executed
        -:  141:                        else {
    #####:  142:                                sum = (double)sum * (1 - (double)current->sale / 100.0);
    #####:  143:                                fprintf(outputHistory, "DISCOUNT %d%%\n", current->sale);
    $$$$$:  143-block  0
unconditional  0 never executed
        -:  144:                        }
    #####:  145:                }
    $$$$$:  145-block  0
unconditional  0 never executed
    #####:  146:                fprintf(outputHistory, "FINAL SUM %d\n", sum);
    #####:  147:                fprintf(outputHistory, "end buyer\n");
    #####:  148:                fclose(outputHistory);
    #####:  149:        }
    $$$$$:  149-block  0
unconditional  0 never executed
    #####:  150:        return sum;
    $$$$$:  150-block  0
unconditional  0 never executed
        -:  151:}
        -:  152:
function ReadBarCodesFromFile called 8 returned 100% blocks executed 80%
        8:  153:BCode ReadBarCodesFromFile(BCode headBC) {
        8:  153-block  0
unconditional  0 taken 8
        -:  154:        int numberofbarcodes;
        8:  155:        FILE *inputBarCodes = fopen("barcode.txt", "r");
        8:  156:        if (!inputBarCodes) {
        8:  156-block  0
branch  0 taken 8
branch  1 taken 0
    #####:  157:                printf("File is not found");
    #####:  158:                exit(0);
    $$$$$:  158-block  0
        -:  159:        }
        8:  160:        fscanf(inputBarCodes, "%d", &numberofbarcodes);
        8:  161:        if (headBC == NULL) {
        8:  161-block  0
branch  0 taken 8
branch  1 taken 0
        8:  162:                headBC = (BCode) malloc(sizeof(barcode));
        8:  163:                if (headBC == NULL){
        8:  163-block  0
branch  0 taken 0
branch  1 taken 8
    #####:  164:                        printf("Can't allocate memory");
    #####:  165:                        exit(0);
    $$$$$:  165-block  0
        -:  166:                }
        8:  167:                headBC->name = (char*)malloc(sizeof(char)*80);
        8:  168:                if (headBC->name == NULL){
        8:  168-block  0
branch  0 taken 0
branch  1 taken 8
    #####:  169:                        printf("Can't allocate memory");
    #####:  170:                        exit(0);
    $$$$$:  170-block  0
        -:  171:                }
        8:  172:                headBC->next = NULL;
        8:  173:                headBC->prev = NULL;
        8:  174:                fscanf(inputBarCodes, "%d%s%d", &(headBC->key), (headBC->name), &(headBC->price));
        8:  175:                numberofbarcodes--;
        8:  176:        }
        8:  176-block  0
unconditional  0 taken 8
        8:  177:        BCode current = headBC;
        -:  178:        int i;
       32:  179:        for(i = 0; i < numberofbarcodes; i++) {
        8:  179-block  0
unconditional  0 taken 8
       32:  179-block  1
branch  1 taken 24
branch  2 taken 8
       24:  179-block  2
unconditional  3 taken 24
        -:  180:                int key;
       24:  181:                char* name = (char*)malloc(sizeof(char)*80);
       24:  182:                if (name == NULL){
       24:  182-block  0
branch  0 taken 0
branch  1 taken 24
    #####:  183:                        printf("Can't allocate memory");
    #####:  184:                        exit(0);
    $$$$$:  184-block  0
        -:  185:                }
        -:  186:                int price;
       24:  187:                int alreadyhave = 0;
       24:  188:                fscanf(inputBarCodes, "%d%s%d", &key, name, &price);
       24:  189:                BCode newcurrent = headBC;
       48:  190:                while (newcurrent != NULL) {
       24:  190-block  0
unconditional  0 taken 24
       48:  190-block  1
branch  1 taken 32
branch  2 taken 16
       24:  190-block  2
unconditional  3 taken 24
       32:  191:                        if (newcurrent->key == key) {
       32:  191-block  0
branch  0 taken 8
branch  1 taken 24
        8:  192:                                alreadyhave = 1;
        8:  193:                                free (name);
        8:  194:                                break;
        8:  194-block  0
unconditional  0 taken 8
        -:  195:                        }
       24:  196:                        newcurrent = newcurrent->next;
        -:  197:                }
       24:  198:                if (alreadyhave == 0) {
       24:  198-block  0
branch  0 taken 16
branch  1 taken 8
       16:  199:                        BCode current = (BCode) malloc(sizeof(barcode));
       16:  200:                        if (current == NULL){
       16:  200-block  0
branch  0 taken 0
branch  1 taken 16
    #####:  201:                                printf("Can't allocate memory");
    #####:  202:                                exit(0);
    $$$$$:  202-block  0
        -:  203:                        }
       16:  204:                        current->next = headBC;
       16:  205:                        current->prev = NULL;
       16:  206:                        headBC->prev = current;
       16:  207:                        headBC = current;
       16:  208:                        current->key = key;
       16:  209:                        current->name = name;
       16:  210:                        current->price = price;
       16:  211:                }
       16:  211-block  0
unconditional  0 taken 16
       24:  212:        }
       24:  212-block  0
unconditional  0 taken 24
        8:  213:        fclose(inputBarCodes);
        8:  214:        printf("OK\n");
        8:  215:        return headBC;
        8:  215-block  0
unconditional  0 taken 8
        -:  216:}
        -:  217:
function AddNewBarCode called 16 returned 100% blocks executed 58%
       16:  218:BCode AddNewBarCode(BCode head)
       16:  218-block  0
unconditional  0 taken 16
        -:  219:{
        -:  220:        int key, price;
       16:  221:        char* name = (char*)malloc(sizeof(char)*80);
       16:  222:        if (name == NULL){
       16:  222-block  0
branch  0 taken 0
branch  1 taken 16
    #####:  223:                printf("Can't allocate memory");
    #####:  224:                exit(0);
    $$$$$:  224-block  0
        -:  225:        }
       16:  226:        key = ReadBarCode();
       16:  227:        printf("\nName: ");
       16:  228:        while (scanf("%s", name)!=1){
       16:  228-block  0
unconditional  0 taken 16
       16:  228-block  1
branch  1 taken 0
branch  2 taken 16
    $$$$$:  228-block  2
unconditional  3 never executed
    #####:  229:                printf("Incorrect input! Try again\n");
    #####:  230:                while (getchar() != '\n') {
    $$$$$:  230-block  0
unconditional  0 never executed
    $$$$$:  230-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  230-block  2
unconditional  3 never executed
        -:  231:                }
        -:  232:        }
       16:  233:        printf("Price: ");
       16:  234:        price = ReadNumber();
       16:  235:        if (head == NULL) {
       16:  235-block  0
branch  0 taken 8
branch  1 taken 8
        8:  236:                head = (barcode*) malloc(sizeof(barcode));
        8:  237:                if (head == NULL){
        8:  237-block  0
branch  0 taken 0
branch  1 taken 8
    #####:  238:                        printf("Can't allocate memory");
    #####:  239:                        exit(0);
    $$$$$:  239-block  0
        -:  240:                }
        8:  241:                head->next = NULL;
        8:  242:                head->prev = NULL;
        8:  243:                head->key = key;
        8:  244:                head->name = name;
        8:  245:                head->price = price;
        8:  246:        }
        8:  246-block  0
unconditional  0 taken 8
        -:  247:        else {
        8:  248:                BCode current = (barcode*) malloc(sizeof(barcode));
        8:  249:                if (current == NULL){
        8:  249-block  0
branch  0 taken 0
branch  1 taken 8
    #####:  250:                        printf("Can't allocate memory");
    #####:  251:                        exit(0);
    $$$$$:  251-block  0
        -:  252:                }
        8:  253:                current->next = head;
        8:  254:                current->prev = NULL;
        8:  255:                head->prev = current;
        8:  256:                head = current;
        8:  257:                current->key = key;
        8:  258:                current->name = name;
        8:  259:                current->price = price;
        8:  259-block  0
unconditional  0 taken 8
        -:  260:        }
       16:  261:        return head;
       16:  261-block  0
unconditional  0 taken 16
        -:  262:}
        -:  263:
function ShowBarCode called 40 returned 100% blocks executed 100%
       40:  264:void ShowBarCode(BCode head) {
       40:  264-block  0
unconditional  0 taken 40
       40:  265:        BCode current = head;
       40:  266:        if (current == NULL)
       40:  266-block  0
branch  0 taken 9
branch  1 taken 31
        -:  267:        {
        9:  268:                printf("List of barcodes is empty\n");
        9:  269:        }
        9:  269-block  0
unconditional  0 taken 9
        -:  270:        else {
      102:  271:                while (current != NULL)
       31:  271-block  0
unconditional  0 taken 31
      102:  271-block  1
branch  1 taken 71
branch  2 taken 31
       71:  271-block  2
unconditional  3 taken 71
        -:  272:                {
       71:  273:                        printf("%d %s price: %d\n", current->key, current->name, current->price);
       71:  274:                        current = current->next;
        -:  275:                }
        -:  276:        }
       40:  277:}
       40:  277-block  0
unconditional  0 taken 40
        -:  278:
function DeleteBarCode called 40 returned 100% blocks executed 95%
       40:  279:BCode DeleteBarCode(BCode head) {
       40:  279-block  0
unconditional  0 taken 40
       40:  280:        ShowBarCode(head);
       40:  281:        if (head == NULL) {
       40:  281-block  0
branch  0 taken 9
branch  1 taken 31
        9:  282:                return head;
        9:  282-block  0
unconditional  0 taken 9
        -:  283:        }
       31:  284:        int deletekey = ReadBarCode();
       31:  285:        BCode current = head;
       62:  286:        while (current != NULL && current->key != deletekey) {
       31:  286-block  0
unconditional  0 taken 31
       62:  286-block  1
branch  1 taken 54
branch  2 taken 8
       54:  286-block  2
unconditional  3 taken 54
       62:  286-block  3
branch  4 taken 31
branch  5 taken 31
       31:  286-block  4
unconditional  6 taken 31
       31:  287:                current = current->next;
        -:  288:        }
       31:  289:        if (current == NULL) {
       31:  289-block  0
branch  0 taken 8
branch  1 taken 23
        8:  290:                printf("\nThis code doesn't exist\n");
        8:  291:                return head;
        8:  291-block  0
unconditional  0 taken 8
        -:  292:        }
       23:  293:        else if (current == head && head->next == NULL) {
       23:  293-block  0
branch  0 taken 16
branch  1 taken 7
       16:  293-block  1
branch  2 taken 8
branch  3 taken 8
        8:  294:                free(current->name);
        8:  295:                head = NULL;
        8:  296:        }
        8:  296-block  0
unconditional  0 taken 8
       15:  297:        else if (current == head) {
       15:  297-block  0
branch  0 taken 8
branch  1 taken 7
        8:  298:                free(current->name);
        8:  299:                head = head->next;
        8:  300:                head->prev = NULL;
        8:  301:        }
        8:  301-block  0
unconditional  0 taken 8
        -:  302:        else {
        7:  303:                free(current->name);
        7:  304:                if (current->prev != NULL){
        7:  304-block  0
branch  0 taken 7
branch  1 taken 0
        7:  305:                        current->prev->next = current->next;
        7:  306:                }
        7:  306-block  0
unconditional  0 taken 7
        7:  307:                if(current->next != NULL){
        7:  307-block  0
branch  0 taken 0
branch  1 taken 7
    #####:  308:                        current->next->prev = current->prev;
    #####:  309:                }
    $$$$$:  309-block  0
unconditional  0 never executed
        -:  310:        }
       23:  311:        printf("\nOK\n");
       23:  312:        return head;
       23:  312-block  0
unconditional  0 taken 23
       40:  313:}
       40:  313-block  0
unconditional  0 taken 40
        -:  314:
function SaveBarCodesInFile called 0 returned 0% blocks executed 0%
    #####:  315:void SaveBarCodesInFile(BCode headBC, FILE* outputBarCode) {
    $$$$$:  315-block  0
unconditional  0 never executed
    #####:  316:        int numberofbarcodes = 0;
    #####:  317:        if (!outputBarCode) {
    $$$$$:  317-block  0
branch  0 never executed
branch  1 never executed
    #####:  318:                printf("File is not found");
    #####:  319:                exit(0);
    $$$$$:  319-block  0
        -:  320:        }
    #####:  321:        BCode current = headBC;
    #####:  322:        while (current != NULL) {
    $$$$$:  322-block  0
unconditional  0 never executed
    $$$$$:  322-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  322-block  2
unconditional  3 never executed
    #####:  323:                numberofbarcodes++;
    #####:  324:                current = current->next;
        -:  325:        }
    #####:  326:        fprintf(outputBarCode, "%d\n", numberofbarcodes);
    #####:  327:        current = headBC;
    #####:  328:        while (current != NULL) {
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  328-block  2
unconditional  3 never executed
    #####:  329:                fprintf(outputBarCode, "%d %s %d\n", current->key, current->name, current->price);
    #####:  330:                current = current->next;
        -:  331:        }
    #####:  332:        printf("OK\n");
    #####:  333:}
    $$$$$:  333-block  0
unconditional  0 never executed
        -:  334:
function ReadCreditCardsFromFile called 8 returned 0% blocks executed 9%
        8:  335:CCard ReadCreditCardsFromFile(CCard headCC) {
        8:  335-block  0
unconditional  0 taken 8
        -:  336:        int numberofcards;
        8:  337:        FILE* inputCreditCard = fopen("creditcard.txt", "r");
        8:  338:        if (!inputCreditCard) {
        8:  338-block  0
branch  0 taken 0
branch  1 taken 8
        8:  339:                printf("File is not found");
        8:  340:                exit(0);
        8:  340-block  0
        -:  341:        }
    #####:  342:        fscanf(inputCreditCard, "%d", &numberofcards);
    #####:  343:        if (headCC == NULL) {
    $$$$$:  343-block  0
branch  0 never executed
branch  1 never executed
    #####:  344:                headCC = (creditcard*) malloc(sizeof(creditcard));
    #####:  345:                if (headCC == NULL){
    $$$$$:  345-block  0
branch  0 never executed
branch  1 never executed
    #####:  346:                        printf("Can't allocate memory");
    #####:  347:                        exit(0);
    $$$$$:  347-block  0
        -:  348:                }
    #####:  349:                headCC->next = NULL;
    #####:  350:                headCC->prev = NULL;
    #####:  351:                fscanf(inputCreditCard, "%d%d", &(headCC->numofcard), &(headCC->sale));
    #####:  352:                numberofcards--;
    #####:  353:        }
    $$$$$:  353-block  0
unconditional  0 never executed
        -:  354:        int i;
    #####:  355:        for (i = 0; i < numberofcards; i++) {
    $$$$$:  355-block  0
unconditional  0 never executed
    $$$$$:  355-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  355-block  2
unconditional  3 never executed
        -:  356:                int numofcard;
        -:  357:                int sale;
    #####:  358:                int alreadyhave = 0;
    #####:  359:                fscanf(inputCreditCard, "%d%d", &numofcard, &sale);
    #####:  360:                CCard newcurrent = headCC;
    #####:  361:                while (newcurrent != NULL) {
    $$$$$:  361-block  0
unconditional  0 never executed
    $$$$$:  361-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  361-block  2
unconditional  3 never executed
    #####:  362:                        if (newcurrent->numofcard == numofcard) {
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:                                alreadyhave = 1;
    #####:  364:                                break;
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:                        }
    #####:  366:                        newcurrent = newcurrent->next;
        -:  367:                }
    #####:  368:                if (alreadyhave == 0)
    $$$$$:  368-block  0
branch  0 never executed
branch  1 never executed
        -:  369:                {
    #####:  370:                        CCard current = (creditcard*) malloc(sizeof(creditcard));
    #####:  371:                        if (current == NULL){
    $$$$$:  371-block  0
branch  0 never executed
branch  1 never executed
    #####:  372:                                printf("Can't allocate memory");
    #####:  373:                                exit(0);
    $$$$$:  373-block  0
        -:  374:                        }
    #####:  375:                        current->next = headCC;
    #####:  376:                        current->prev = NULL;
    #####:  377:                        headCC->prev = current;
    #####:  378:                        headCC = current;
    #####:  379:                        current->sale = sale;
    #####:  380:                        current->numofcard = numofcard;
    #####:  381:                }
    $$$$$:  381-block  0
unconditional  0 never executed
    #####:  382:        }
    $$$$$:  382-block  0
unconditional  0 never executed
    #####:  383:        fclose(inputCreditCard);
    #####:  384:        printf("OK\n");
    #####:  385:        return headCC;
    $$$$$:  385-block  0
unconditional  0 never executed
        -:  386:}
        -:  387:
function AddNewCreditCard called 0 returned 0% blocks executed 0%
    #####:  388:CCard AddNewCreditCard(CCard head) {
    $$$$$:  388-block  0
unconditional  0 never executed
        -:  389:        int numofcard, sale;
    #####:  390:        numofcard = ReadNumOfCard();
    #####:  391:        printf("\nSale: ");
    #####:  392:        while (scanf("%d", &sale)!=1 || sale < 0){
    $$$$$:  392-block  0
unconditional  0 never executed
    $$$$$:  392-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  392-block  2
unconditional  3 never executed
    $$$$$:  392-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  392-block  4
unconditional  6 never executed
    #####:  393:                printf("Incorrect input! Try again\n");
    #####:  394:		while (getchar() != '\n') {
    $$$$$:  394-block  0
unconditional  0 never executed
    $$$$$:  394-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  394-block  2
unconditional  3 never executed
        -:  395:		}
        -:  396:        }
    #####:  397:        if (head == NULL) {
    $$$$$:  397-block  0
branch  0 never executed
branch  1 never executed
    #####:  398:                head = (creditcard*) malloc(sizeof(creditcard));
    #####:  399:                if (head == NULL){
    $$$$$:  399-block  0
branch  0 never executed
branch  1 never executed
    #####:  400:                        printf("Can't allocate memory");
    #####:  401:                        exit(0);
    $$$$$:  401-block  0
        -:  402:                }
    #####:  403:                head->next = NULL;
    #####:  404:                head->prev = NULL;
    #####:  405:                head->sale = sale;
    #####:  406:                head->numofcard = numofcard;
    #####:  407:        }
    $$$$$:  407-block  0
unconditional  0 never executed
        -:  408:        else {
    #####:  409:                int alreadyhave = 0;
    #####:  410:                CCard newcurrent = head;
    #####:  411:                while (newcurrent != NULL) {
    $$$$$:  411-block  0
unconditional  0 never executed
    $$$$$:  411-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  411-block  2
unconditional  3 never executed
    #####:  412:                        if (newcurrent->numofcard == numofcard) {
    $$$$$:  412-block  0
branch  0 never executed
branch  1 never executed
    #####:  413:                                alreadyhave = 1;
    #####:  414:                                break;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:                        }
    #####:  416:                        newcurrent = newcurrent->next;
        -:  417:                }
    #####:  418:                if (alreadyhave == 0)
    $$$$$:  418-block  0
branch  0 never executed
branch  1 never executed
        -:  419:                {
    #####:  420:                        CCard current = (creditcard*) malloc(sizeof(creditcard));
    #####:  421:                        if (current == NULL){
    $$$$$:  421-block  0
branch  0 never executed
branch  1 never executed
    #####:  422:                                printf("Can't allocate memory");
    #####:  423:                                exit(0);
    $$$$$:  423-block  0
        -:  424:                        }
    #####:  425:                        current->next = head;
    #####:  426:                        current->prev = NULL;
    #####:  427:                        head->prev = current;
    #####:  428:                        head = current;
    #####:  429:                        current->sale = sale;
    #####:  430:                        current->numofcard = numofcard;
    #####:  431:                }
    $$$$$:  431-block  0
unconditional  0 never executed
        -:  432:        }
    #####:  433:        return head;
    $$$$$:  433-block  0
unconditional  0 never executed
        -:  434:}
        -:  435:
function ShowCreditCard called 0 returned 0% blocks executed 0%
    #####:  436:void ShowCreditCard(CCard head) {
    $$$$$:  436-block  0
unconditional  0 never executed
    #####:  437:        CCard current = head;
    #####:  438:        if (current == NULL) {
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    #####:  439:                printf("List of credit cards is empty\n");
    #####:  440:        }
    $$$$$:  440-block  0
unconditional  0 never executed
        -:  441:        else {
    #####:  442:                while (current != NULL) {
    $$$$$:  442-block  0
unconditional  0 never executed
    $$$$$:  442-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  442-block  2
unconditional  3 never executed
    #####:  443:                        printf("Card %d, discount: %d\n", current->numofcard, current->sale);
    #####:  444:                        current = current->next;
        -:  445:                }
        -:  446:        }
        -:  447:
    #####:  448:}
    $$$$$:  448-block  0
unconditional  0 never executed
        -:  449:
function DeleteCreditCard called 0 returned 0% blocks executed 0%
    #####:  450:CCard DeleteCreditCard(CCard head) {
    $$$$$:  450-block  0
unconditional  0 never executed
    #####:  451:        ShowCreditCard(head);
    #####:  452:        if (head == NULL) {
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    #####:  453:                return head;
    $$$$$:  453-block  0
unconditional  0 never executed
        -:  454:        }
    #####:  455:        int deletecard = ReadNumOfCard();
    #####:  456:        CCard current = head;
    #####:  457:        while (current != NULL && current->numofcard != deletecard) {
    $$$$$:  457-block  0
unconditional  0 never executed
    $$$$$:  457-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  457-block  2
unconditional  3 never executed
    $$$$$:  457-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  457-block  4
unconditional  6 never executed
    #####:  458:                current = current->next;
        -:  459:        }
    #####:  460:        if (current == NULL) {
    $$$$$:  460-block  0
branch  0 never executed
branch  1 never executed
    #####:  461:                printf("\nThis card doesn't exist\n");
    #####:  462:                return head;
    $$$$$:  462-block  0
unconditional  0 never executed
        -:  463:        }
    #####:  464:        else if (current == head && head->next == NULL) {
    $$$$$:  464-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  464-block  1
branch  2 never executed
branch  3 never executed
    #####:  465:                head = NULL;
    #####:  466:        }
    $$$$$:  466-block  0
unconditional  0 never executed
    #####:  467:        else if (current == head) {
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
    #####:  468:                head = head->next;
    #####:  469:                head->prev = NULL;
    #####:  470:        }
    $$$$$:  470-block  0
unconditional  0 never executed
        -:  471:        else {
    #####:  472:                if (current->prev != NULL){
    $$$$$:  472-block  0
branch  0 never executed
branch  1 never executed
    #####:  473:                        current->prev->next = current->next;
    #####:  474:                }
    $$$$$:  474-block  0
unconditional  0 never executed
    #####:  475:                if (current->next != NULL){
    $$$$$:  475-block  0
branch  0 never executed
branch  1 never executed
    #####:  476:                        current->next->prev = current->prev;
    #####:  477:                }
    $$$$$:  477-block  0
unconditional  0 never executed
        -:  478:        }
    #####:  479:        printf("\nOK\n");
    #####:  480:        return head;
    $$$$$:  480-block  0
unconditional  0 never executed
    #####:  481:}
    $$$$$:  481-block  0
unconditional  0 never executed
        -:  482:
function SaveCreditCardInFile called 0 returned 0% blocks executed 0%
    #####:  483:void SaveCreditCardInFile(CCard headCC, FILE* outputCreditCard) {
    $$$$$:  483-block  0
unconditional  0 never executed
    #####:  484:        int numberofcards = 0;
    #####:  485:        if (!outputCreditCard) {
    $$$$$:  485-block  0
branch  0 never executed
branch  1 never executed
    #####:  486:                printf("File is not found");
    #####:  487:                exit(0);
    $$$$$:  487-block  0
        -:  488:        }
    #####:  489:        CCard current = headCC;
    #####:  490:        while (current != NULL) {
    $$$$$:  490-block  0
unconditional  0 never executed
    $$$$$:  490-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  490-block  2
unconditional  3 never executed
    #####:  491:                numberofcards++;
    #####:  492:                current = current->next;
        -:  493:        }
    #####:  494:        fprintf(outputCreditCard, "%d\n", numberofcards);
    #####:  495:        current = headCC;
    #####:  496:        while (current != NULL) {
    $$$$$:  496-block  0
unconditional  0 never executed
    $$$$$:  496-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  496-block  2
unconditional  3 never executed
    #####:  497:                fprintf(outputCreditCard, "%d %d\n", current->numofcard, current->sale);
    #####:  498:                current = current->next;
        -:  499:        }
    #####:  500:        printf("OK\n");
    #####:  501:}
    $$$$$:  501-block  0
unconditional  0 never executed
